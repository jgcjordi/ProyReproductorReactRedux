{"version":3,"sources":["images/discDefault.jpg","images/reproductor.jpg","components/CardSong.jsx","components/Player.jsx","components/AudioPlayerControll.jsx","view/MediaPlayer.jsx","actions/mediaPlayer.js","App.js","serviceWorker.js","reducers/mediaPlayer.js","reducers/index.js","index.js"],"names":["module","exports","CardSong","props","className","id","title","src","onDragStart","draggable","alt","Player","onDrop","onDragOver","imagePlayer","AudioPlayerControll","state","playPauseIcon","totalTime","currentTime","progressPrecentaje","startSong","onPlayPauseClick","bind","this","playerSC","startProgressControll","setState","on","formatTime","getDuration","percentaje","songPercentaje","time","secAux","parseInt","minAux","min","Math","floor","sec","duration","dur","isPlaying","pause","play","onClick","xmlns","width","height","viewBox","fill","fillRule","d","data-direction","style","data-method","Component","connect","mediaPlayer","MediaPlayer","SC","initialize","client_id","handleKeyDown","onSearcherTextChanged","onDragOverAtPlayer","onDropAtPlayer","getArraySongs","event","key","newSearchText","target","value","ev","dataTransfer","setData","preventDefault","getData","stream","then","player","console","log","newPlayerSC","newImagePlayer","get","q","searchText","res","newArraySongs","song","artwork_url","ImageDiscDefault","image","ImagePlayer","onBtnSearchClicked","type","placeholder","onChange","onKeyDown","ifEmptyImagePlayer","arraySongs","map","ifNullImageDisc","dispatch","payload","App","Boolean","window","location","hostname","match","INITIAL_STATE","action","combineReducers","store","createStore","RootReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.01ea6f28.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/discDefault.fbb3aa47.jpg\";","module.exports = __webpack_public_path__ + \"static/media/reproductor.3c41c5a7.jpg\";","import React from 'react';\r\nimport './CardSong.css';\r\n\r\n\r\nfunction CardSong(props) {\r\n    return (\r\n        <div className=\"CardSong\" id={`${props.id}`} title={props.src} onDragStart={props.onDragStart} draggable>\r\n            <img className=\"cardSongImg\" id={`${props.id}`}  src={props.src} alt=\"discImage\">\r\n            </img>\r\n            <div className=\"cardTitle\">{props.title}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardSong;","import React from 'react';\r\nimport './Player.css';\r\n\r\n\r\nfunction Player(props) {\r\n\r\n    return (\r\n        <div className=\"Player\" onDrop={props.onDrop} onDragOver={props.onDragOver}>\r\n            <img className=\"playerImg\"\r\n                src={props.imagePlayer}\r\n                alt=\"palyerImage\">\r\n            </img>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\nimport './AudioPlayerControll.css';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nclass AudioPlayerControll extends Component {\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n\r\n        this.state = {\r\n            playPauseIcon: \"M0 0h6v24H0zM12 0h6v24h-6z\",\r\n            totalTime: \"-:--\",\r\n            currentTime: \"-:--\",\r\n            progressPrecentaje: \"0%\",\r\n            startSong: true,\r\n        };\r\n\r\n        this.onPlayPauseClick = this.onPlayPauseClick.bind(this);\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.props.playerSC != null && this.state.startSong) {\r\n            this.startProgressControll()\r\n            this.setState({\r\n                startSong: false,\r\n            })\r\n        }\r\n        return null\r\n    }\r\n\r\n\r\n    startProgressControll() {\r\n        this.props.playerSC.on(\"time\",() => {\r\n\r\n            let totalTime = this.formatTime(this.props.playerSC.getDuration());\r\n            let currentTime = this.formatTime(this.props.playerSC.currentTime());\r\n\r\n            let songPercentajeNumber = this.songPercentaje(\r\n                this.props.playerSC.getDuration(),\r\n                this.props.playerSC.currentTime()\r\n            );\r\n\r\n            let percentaje = songPercentajeNumber + '%'\r\n\r\n            this.setState({\r\n                totalTime: totalTime,\r\n                currentTime: currentTime,\r\n                progressPrecentaje: percentaje,\r\n            })\r\n        })\r\n    }\r\n\r\n    formatTime(time) {\r\n        if (time != null) {\r\n            let timeNumber = parseInt(time, 10)\r\n            let secAux = timeNumber / 1000;\r\n            let minAux = secAux / 60\r\n            let min = Math.floor(minAux);\r\n            let sec = Math.floor(secAux % 60);\r\n            return min + ':' + (sec < 10 ? '0' + sec : sec);\r\n        }\r\n    }\r\n\r\n    songPercentaje(duration, currentTime) {\r\n        if (duration != null && currentTime != null) {\r\n            let dur = parseInt(duration, 10)\r\n            let current = parseInt(currentTime, 10)\r\n            return current / dur * 100;\r\n        }\r\n    }\r\n\r\n\r\n    onPlayPauseClick() {\r\n        if (this.props.playerSC != null) {\r\n            if (this.props.playerSC.isPlaying()) {\r\n                this.props.playerSC.pause();\r\n                this.setState({\r\n                    playPauseIcon: \"M18 12L0 24V0\",\r\n                })\r\n            } else {\r\n                if (!this.props.playerSC.isPlaying()) {\r\n                    this.props.playerSC.play();\r\n                    this.setState({\r\n                        playPauseIcon: \"M0 0h6v24H0zM12 0h6v24h-6z\",\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    ////////////RENDER///////////////\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"audio green-audio-player\">\r\n                <div className=\"play-pause-btn\" onClick={this.onPlayPauseClick}>\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"18\" height=\"24\" viewBox=\"0 0 18 24\">\r\n                        <path className=\"play-pause-icon\" id=\"playPause\" fill=\"#566574\" fillRule=\"evenodd\" d={this.state.playPauseIcon} ></path>\r\n                    </svg>\r\n                </div>\r\n\r\n                <div className=\"controls\">\r\n                    <span className=\"current-time\">{this.state.currentTime}</span>\r\n                    <div className=\"slider\" data-direction=\"horizontal\">\r\n                        <div className=\"progress\" style={{ width: `${this.state.progressPrecentaje}` }}>\r\n                            <div className=\"pin\" id=\"progress-pin\" data-method=\"rewind\"></div>\r\n                        </div>\r\n                    </div>\r\n                    <span className=\"total-time\">{this.state.totalTime}</span>\r\n                </div>\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n    playerSC: state.mediaPlayer.playerSC,\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps\r\n)(AudioPlayerControll);","import React, { Component } from 'react';\r\n\r\nimport CardSong from '../components/CardSong';\r\nimport Player from '../components/Player';\r\nimport AudioPlayerControll from '../components/AudioPlayerControll';\r\n\r\nimport SC from 'soundcloud';\r\n\r\nimport ImageDiscDefault from '../images/discDefault.jpg';\r\nimport ImagePlayer from '../images/reproductor.jpg';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { newSearchText, newArraySongs, newImagePlayer, newPlayerSC } from '../actions/mediaPlayer';\r\n\r\nimport './MediaPlayer.css';\r\n\r\n\r\n\r\n\r\nclass MediaPlayer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        SC.initialize({\r\n            client_id: 'aa06b0630e34d6055f9c6f8beb8e02eb'\r\n        });\r\n\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.onSearcherTextChanged = this.onSearcherTextChanged.bind(this);\r\n        this.onDragOverAtPlayer = this.onDragOverAtPlayer.bind(this);\r\n        this.onDropAtPlayer = this.onDropAtPlayer.bind(this);\r\n    }\r\n\r\n    //Listeners\r\n\r\n    onBtnSearchClicked() {\r\n        this.getArraySongs()\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        if (event.key === 'Enter') {\r\n            this.getArraySongs()\r\n        }\r\n    }\r\n\r\n    onSearcherTextChanged(event) {\r\n        this.props.newSearchText(event.target.value)\r\n    }\r\n\r\n    onDragStart(ev) {\r\n        ev.dataTransfer.setData(\"idSong\", ev.target.id);\r\n        ev.dataTransfer.setData(\"srcSong\", ev.target.title);\r\n    }\r\n\r\n    onDragOverAtPlayer(ev) {\r\n        ev.preventDefault();\r\n    }\r\n\r\n    onDropAtPlayer(ev) {\r\n        ev.preventDefault();\r\n        let id = ev.dataTransfer.getData(\"idSong\");\r\n        let src = ev.dataTransfer.getData(\"srcSong\");\r\n        SC.stream('/tracks/' + id)\r\n            .then((player) => {\r\n                player.play()\r\n                console.log(player)\r\n                this.props.newPlayerSC(player)\r\n            });\r\n        this.props.newImagePlayer(src)\r\n    }\r\n\r\n\r\n    /////////SHORTEN FUNCTIONS//////////////\r\n\r\n\r\n    getArraySongs() {\r\n        SC.get('/tracks', {\r\n            q: this.props.searchText\r\n        })\r\n            .then((res) => {\r\n                this.props.newArraySongs(res)\r\n                this.props.newSearchText(\"\")\r\n            })\r\n    }\r\n\r\n    ifNullImageDisc(song) {\r\n        let image\r\n        if (song.artwork_url != null) {\r\n            image = song.artwork_url\r\n        } else {\r\n            image = ImageDiscDefault\r\n        }\r\n        return image\r\n    }\r\n\r\n    ifEmptyImagePlayer() {\r\n        let image = this.props.imagePlayer\r\n        if (image === \"\") {\r\n            image = ImagePlayer\r\n        }\r\n        return image\r\n    }\r\n\r\n    onPlay() {\r\n\r\n    }\r\n\r\n\r\n    ////////////RENDER///////////////\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"searcherAndMedia\">\r\n\r\n                <div className=\"media\">\r\n\r\n                    <div className=\"playerWithBar\">\r\n                        <div className=\"searcher\">\r\n                            <button className=\"searchButton\" onClick={() => this.onBtnSearchClicked()}>Buscar</button>\r\n                            <input\r\n                                className=\"seacherTextImput\"\r\n                                type=\"text\"\r\n                                placeholder=\"Busca la cancion...\"\r\n                                onChange={(ev) => this.onSearcherTextChanged(ev)}\r\n                                onKeyDown={this.handleKeyDown}\r\n                                value={this.props.searchText}\r\n                            />\r\n                        </div>\r\n\r\n                        <Player\r\n                            onDragOver={(ev) => this.onDragOverAtPlayer(ev)}\r\n                            onDrop={(ev) => this.onDropAtPlayer(ev)}\r\n                            imagePlayer={this.ifEmptyImagePlayer()} />\r\n\r\n                        <AudioPlayerControll />\r\n                    </div>\r\n\r\n\r\n                    <div className=\"cardsSong\">\r\n                        {this.props.arraySongs.map(song =>\r\n                            <CardSong\r\n                                key={song.id}\r\n                                id={song.id}\r\n                                title={song.title}\r\n                                src={this.ifNullImageDisc(song)}\r\n                                onDragStart={this.onDragStart}\r\n                            />)}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <pre>\r\n                    {console.log(this.props.playerSC)}\r\n                </pre> */}\r\n\r\n                {/* <pre>\r\n                    {JSON.stringify(this.props.arraySongs, null,4)}\r\n                </pre> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    searchText: state.mediaPlayer.searchText,\r\n    imagePlayer: state.mediaPlayer.imagePlayer,\r\n    arraySongs: state.mediaPlayer.arraySongs,\r\n    playerSC: state.mediaPlayer.playerSC\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    newSearchText: (searchText) => dispatch(newSearchText(searchText)),\r\n    newImagePlayer: (imagePlayer) => dispatch(newImagePlayer(imagePlayer)),\r\n    newArraySongs: (arraySongs) => dispatch(newArraySongs(arraySongs)),\r\n    newPlayerSC: (playerSC) => dispatch(newPlayerSC(playerSC))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MediaPlayer);","export const newSearchText =\r\n    (searchText) => ({\r\n        type: 'NEW_SEARCH_TEXT',\r\n        payload: {\r\n            searchText,\r\n        }\r\n    })\r\n\r\nexport const newImagePlayer =\r\n    (imagePlayer) => ({\r\n        type: 'NEW_IMAGE_PLAYER',\r\n        payload: {\r\n            imagePlayer,\r\n        }\r\n    })\r\n\r\nexport const newArraySongs =\r\n    (arraySongs) => ({\r\n        type: 'NEW_ARRAY_SONGS',\r\n        payload: {\r\n            arraySongs,\r\n        }\r\n    })\r\n\r\nexport const newPlayerSC =\r\n    (playerSC, startSong) => ({\r\n        type: 'NEW_PLAYER_SC',\r\n        payload: {\r\n            playerSC,\r\n        }\r\n    })","import React from 'react';\nimport './App.css';\nimport MediaPlayer from './view/MediaPlayer';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <h1>Reproductor con React y Redux con API SoundCloud</h1>\n      <MediaPlayer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Estado Inicial del Reducer\r\nconst INITIAL_STATE = {\r\n    searchText: '',\r\n    arraySongs: [],\r\n    imagePlayer: '',\r\n    playerSC: null,\r\n\r\n}\r\n\r\n//El Reducer, donde tiene todas los actions que pueden interatuar con el.\r\nconst mediaPlayer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'NEW_SEARCH_TEXT':\r\n            return {\r\n                ...state,\r\n                searchText: action.payload.searchText,\r\n            }\r\n\r\n        case 'NEW_IMAGE_PLAYER':\r\n            return {\r\n                ...state,\r\n                imagePlayer: action.payload.imagePlayer,\r\n            }\r\n\r\n        case 'NEW_ARRAY_SONGS':\r\n            return {\r\n                ...state,\r\n                arraySongs: action.payload.arraySongs,\r\n            }\r\n\r\n        case 'NEW_PLAYER_SC':\r\n            return {\r\n                ...state,\r\n                playerSC: action.payload.playerSC,\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default mediaPlayer;","import { combineReducers } from 'redux'\r\n\r\n//Dependencias de Reducers\r\nimport mediaPlayer from './mediaPlayer';\r\n\r\n// Exportamos CombineReducers donde alojaremos todos los reducers\r\nexport default combineReducers({\r\n    mediaPlayer\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Dependencias de Redux para React\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// Importamos todos los Reducers de index.js\nimport RootReducers from './reducers';\n\n//Creamos el store a partir de un conjunto de Reducers\nconst store = createStore(RootReducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    /* Provider SIEMPRE tiene el Atributo store */\n    <Provider store={store}>\n        <App /> \n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}