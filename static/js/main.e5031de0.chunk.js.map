{"version":3,"sources":["images/discDefault.jpg","images/reproductor.jpg","components/CardSong.jsx","components/Player.jsx","view/MediaPlayer.jsx","actions/mediaPlayer.js","App.js","serviceWorker.js","reducers/mediaPlayer.js","reducers/index.js","index.js"],"names":["module","exports","CardSong","props","className","id","onDragStart","draggable","src","alt","title","Player","onDrop","onDragOver","imagePlayer","MediaPlayer","SC","initialize","client_id","handleKeyDown","bind","onSearcherTextChanged","onDragOverAtPlayer","onDropAtPlayer","this","getArraySongs","event","key","newSearchText","target","value","ev","console","log","dataTransfer","setData","preventDefault","getData","stream","then","player","play","newImagePlayer","get","q","searchText","res","newArraySongs","song","artwork_url","ImageDiscDefault","image","ImagePlayer","onClick","onBtnSearchClicked","type","placeholder","onChange","onKeyDown","ifEmptyImagePlayer","arraySongs","map","ifNullImageDisc","Component","connect","state","mediaPlayer","dispatch","payload","App","Boolean","window","location","hostname","match","INITIAL_STATE","action","combineReducers","store","createStore","RootReducers","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5031de0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/discDefault.fbb3aa47.jpg\";","module.exports = __webpack_public_path__ + \"static/media/reproductor.3c41c5a7.jpg\";","import React from 'react';\r\n\r\nfunction CardSong(props) {\r\n    return (\r\n        <div className=\"CardSong\" id={`${props.id}`} onDragStart={props.onDragStart} draggable>\r\n            <img className=\"playerImg\" id={`${props.id}`}  src={props.src} alt=\"discImage\">\r\n            </img>\r\n            <span>{props.title}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default CardSong;\r\n\r\n\r\n\r\n// import React from 'react';\r\n\r\n// function CardSong(props) {\r\n//     return (\r\n//         <div className=\"CardSong\" id={`${props.id}`} onDragStart={props.onDragStart} draggable>\r\n//             <img className=\"playerImg\" id={`${props.id}`}  src={props.src} alt=\"discImage\">\r\n//             </img>\r\n//             <span>{props.title}</span>\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default CardSong;","import React from 'react';\r\n\r\nfunction Player(props) {\r\n\r\n    return (\r\n        <div className=\"Player\" onDrop={props.onDrop} onDragOver={props.onDragOver}>\r\n            <img className=\"playerImg\"\r\n                src={props.imagePlayer}\r\n                alt=\"palyerImage\">\r\n            </img>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default Player;","import React, { Component } from 'react';\r\nimport CardSong from '../components/CardSong';\r\nimport Player from '../components/Player';\r\nimport SC from 'soundcloud';\r\nimport ImageDiscDefault from '../images/discDefault.jpg';\r\nimport ImagePlayer from '../images/reproductor.jpg';\r\n\r\n\r\nimport { connect } from 'react-redux';\r\nimport { newSearchText, newArraySongs, newImagePlayer } from '../actions/mediaPlayer';\r\n\r\n\r\n\r\nclass MediaPlayer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        SC.initialize({\r\n            client_id: 'aa06b0630e34d6055f9c6f8beb8e02eb'\r\n        });\r\n\r\n        this.handleKeyDown = this.handleKeyDown.bind(this);\r\n        this.onSearcherTextChanged = this.onSearcherTextChanged.bind(this);\r\n        this.onDragOverAtPlayer = this.onDragOverAtPlayer.bind(this);\r\n        this.onDropAtPlayer = this.onDropAtPlayer.bind(this);\r\n    }\r\n\r\n    //Listeners\r\n\r\n    onBtnSearchClicked() {\r\n        this.getArraySongs()\r\n    }\r\n\r\n    handleKeyDown(event) {\r\n        if (event.key === 'Enter') {\r\n            this.getArraySongs()\r\n        }\r\n    }\r\n\r\n    onSearcherTextChanged(event) {\r\n        this.props.newSearchText(event.target.value)\r\n    }\r\n\r\n    onDragStart(ev) {\r\n        console.log(\"OnDragStart\")\r\n        console.log(ev.target.src)\r\n        ev.dataTransfer.setData(\"idSong\", ev.target.id);\r\n        ev.dataTransfer.setData(\"srcSong\", ev.target.src);\r\n\r\n        console.log(ev.target.id)\r\n    }\r\n\r\n    onDragOverAtPlayer(ev) {\r\n        ev.preventDefault();\r\n        console.log(\"OnDragOverAtPlayer\")\r\n    }\r\n\r\n    onDropAtPlayer(ev) {\r\n        ev.preventDefault();\r\n        console.log(\"OnDropAtPlayer\")\r\n        let id = ev.dataTransfer.getData(\"idSong\");\r\n        let src = ev.dataTransfer.getData(\"srcSong\");\r\n        console.log(src)\r\n        console.log(id)\r\n        SC.stream('/tracks/' + id).then(function (player) {\r\n            player.play();\r\n            console.log(player)\r\n        });\r\n        this.props.newImagePlayer(src)\r\n    }\r\n\r\n\r\n    /////////SHORTEN FUNCTIONS//////////////\r\n\r\n\r\n    getArraySongs() {\r\n        SC.get('/tracks', {\r\n            q: this.props.searchText\r\n        })\r\n            .then((res) => {\r\n                this.props.newArraySongs(res)\r\n                this.props.newSearchText(\"\")\r\n            })\r\n    }\r\n\r\n    ifNullImageDisc(song) {\r\n        let image\r\n        if (song.artwork_url != null) {\r\n            image = song.artwork_url\r\n        } else {\r\n            image = ImageDiscDefault\r\n        }\r\n        return image\r\n    }\r\n\r\n    ifEmptyImagePlayer() {\r\n        let image = this.props.imagePlayer\r\n        if (image == \"\") {\r\n            image = ImagePlayer\r\n        }\r\n        return image\r\n    }\r\n\r\n\r\n    ////////////RENDER///////////////\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div className=\"searcherAndMedia\">\r\n                <h1>Reproductor con React y Redux con API SoundCloud</h1>\r\n\r\n                <div className=\"searcher\">\r\n                    <button className=\"searchButton\" onClick={() => this.onBtnSearchClicked()}>Buscar</button>\r\n                    <input\r\n                        className=\"seacherTextImput\"\r\n                        type=\"text\"\r\n                        placeholder=\"Busca la cancion...\"\r\n                        onChange={(ev) => this.onSearcherTextChanged(ev)}\r\n                        onKeyDown={this.handleKeyDown}\r\n                        value={this.props.searchText}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"media\">\r\n                    <Player\r\n                        onDragOver={(ev) => this.onDragOverAtPlayer(ev)}\r\n                        onDrop={(ev) => this.onDropAtPlayer(ev)}\r\n                        imagePlayer={this.ifEmptyImagePlayer()} />\r\n\r\n                    <div className=\"cardsSong\">\r\n                        {this.props.arraySongs.map(song =>\r\n                            <CardSong\r\n                                id={song.id}\r\n                                title={song.title}\r\n                                src={this.ifNullImageDisc(song)}\r\n                                onDragStart={this.onDragStart}\r\n                            />)}\r\n                    </div>\r\n                </div>\r\n\r\n                {/* <pre>\r\n                    {JSON.stringify(this.props.arraySongs, null,4)}\r\n                </pre> */}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    searchText: state.mediaPlayer.searchText,\r\n    imagePlayer: state.mediaPlayer.imagePlayer,\r\n    arraySongs: state.mediaPlayer.arraySongs\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n    newSearchText: (searchText) => dispatch(newSearchText(searchText)),\r\n    newImagePlayer: (imagePlayer) => dispatch(newImagePlayer(imagePlayer)),\r\n    newArraySongs: (arraySongs) => dispatch(newArraySongs(arraySongs))\r\n})\r\n\r\nexport default connect(\r\n    mapStateToProps,\r\n    mapDispatchToProps\r\n)(MediaPlayer);","export const newSearchText =\r\n    (searchText) => ({\r\n        type: 'NEW_SEARCH_TEXT',\r\n        payload: {\r\n            searchText,\r\n        }\r\n    })\r\n\r\nexport const newImagePlayer =\r\n    (imagePlayer) => ({\r\n        type: 'NEW_IMAGE_PLAYER',\r\n        payload: {\r\n            imagePlayer,\r\n        }\r\n    })\r\n\r\nexport const newArraySongs =\r\n    (arraySongs) => ({\r\n        type: 'NEW_ARRAY_SONGS',\r\n        payload: {\r\n            arraySongs,\r\n        }\r\n    })","import React from 'react';\nimport './App.css';\nimport MediaPlayer from './view/MediaPlayer';\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <MediaPlayer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Estado Inicial del Reducer\r\nconst INITIAL_STATE = {\r\n    searchText: '',\r\n    arraySongs: [],\r\n    imagePlayer: '',\r\n\r\n}\r\n\r\n//El Reducer, donde tiene todas los actions que pueden interatuar con el.\r\nconst mediaPlayer = (state = INITIAL_STATE, action) => {\r\n    switch (action.type) {\r\n        case 'NEW_SEARCH_TEXT':\r\n            return {\r\n                ...state,\r\n                searchText: action.payload.searchText,\r\n            }\r\n\r\n        case 'NEW_IMAGE_PLAYER':\r\n            return {\r\n                ...state,\r\n                imagePlayer: action.payload.imagePlayer,\r\n            }\r\n\r\n        case 'NEW_ARRAY_SONGS':\r\n            return {\r\n                ...state,\r\n                arraySongs: action.payload.arraySongs,\r\n            }\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default mediaPlayer;","import { combineReducers } from 'redux'\r\n\r\n//Dependencias de Reducers\r\nimport mediaPlayer from './mediaPlayer';\r\n//import song from './song';\r\n\r\n// Exportamos CombineReducers donde alojaremos todos los reducers\r\nexport default combineReducers({\r\n    mediaPlayer,\r\n    //song,\r\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// Dependencias de Redux para React\nimport { createStore, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\n// Importamos todos los Reducers de index.js\nimport RootReducers from './reducers';\n\n//Creamos el store a partir de un conjunto de Reducers\nconst store = createStore(RootReducers, applyMiddleware(thunk));\n\nReactDOM.render(\n    /* Provider SIEMPRE tiene el Atributo store */\n    <Provider store={store}>\n        <App /> \n    </Provider>\n    ,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}